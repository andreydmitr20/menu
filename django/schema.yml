openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/dish/ingredients/:
    get:
      operationId: dish_ingredients_retrieve
      tags:
      - dish
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
          description: ''
  /api/dish/tags/:
    get:
      operationId: dish_tags_retrieve
      tags:
      - dish
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /api/dish/units/:
    get:
      operationId: dish_units_retrieve
      tags:
      - dish
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
  /api/dish/vitamins/:
    get:
      operationId: dish_vitamins_retrieve
      tags:
      - dish
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vitamin'
          description: ''
  /api/user/:
    get:
      operationId: user_retrieve
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: user_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/change-password/:
    put:
      operationId: user_change_password_update
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
  /api/user/logout/:
    post:
      operationId: user_logout_create
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/user/register/:
    post:
      operationId: user_register_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Registration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: ''
  /api/user/test/:
    get:
      operationId: user_test_retrieve
      tags:
      - user
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/user/token/:
    post:
      operationId: user_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/user/token/refresh/:
    post:
      operationId: user_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        photo:
          type: string
          maxLength: 400
        creator:
          type: string
        proteins:
          type: number
          format: double
          nullable: true
        fats:
          type: number
          format: double
          nullable: true
        carbohydrates:
          type: number
          format: double
          nullable: true
        vitamins:
          type: object
          additionalProperties: {}
          nullable: true
      required:
      - creator
      - id
      - name
      - photo
    PasswordChange:
      type: object
      properties:
        current_password:
          type: string
        new_password:
          type: string
      required:
      - current_password
      - new_password
    Registration:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
        password:
          type: string
          writeOnly: true
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 100
        icon:
          type: string
          maxLength: 400
      required:
      - password
      - username
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 50
        description:
          type: string
          nullable: true
          maxLength: 300
      required:
      - id
      - name
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    Unit:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 20
        description:
          type: string
          nullable: true
          maxLength: 30
      required:
      - id
      - name
    User:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          title: Email address
          maxLength: 100
        icon:
          type: string
          maxLength: 400
      required:
      - username
    Vitamin:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 20
        description:
          type: string
          nullable: true
          maxLength: 50
      required:
      - id
      - name
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
